/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.harrys.hyppo.worker.rt.data;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRecord\",\"namespace\":\"io.ingestion.worker.rt.data\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"valueOne\",\"type\":[\"int\",\"null\"]},{\"name\":\"valueTwo\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence name;
  @Deprecated public Integer valueOne;
  @Deprecated public Long valueTwo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestRecord() {}

  /**
   * All-args constructor.
   */
  public TestRecord(CharSequence name, Integer valueOne, Long valueTwo) {
    this.name = name;
    this.valueOne = valueOne;
    this.valueTwo = valueTwo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return valueOne;
    case 2: return valueTwo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: name = (CharSequence)value$; break;
    case 1: valueOne = (Integer)value$; break;
    case 2: valueTwo = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'valueOne' field.
   */
  public Integer getValueOne() {
    return valueOne;
  }

  /**
   * Sets the value of the 'valueOne' field.
   * @param value the value to set.
   */
  public void setValueOne(Integer value) {
    this.valueOne = value;
  }

  /**
   * Gets the value of the 'valueTwo' field.
   */
  public Long getValueTwo() {
    return valueTwo;
  }

  /**
   * Sets the value of the 'valueTwo' field.
   * @param value the value to set.
   */
  public void setValueTwo(Long value) {
    this.valueTwo = value;
  }

  /** Creates a new TestRecord RecordBuilder */
  public static TestRecord.Builder newBuilder() {
    return new TestRecord.Builder();
  }

  /** Creates a new TestRecord RecordBuilder by copying an existing Builder */
  public static TestRecord.Builder newBuilder(TestRecord.Builder other) {
    return new TestRecord.Builder(other);
  }

  /** Creates a new TestRecord RecordBuilder by copying an existing TestRecord instance */
  public static TestRecord.Builder newBuilder(TestRecord other) {
    return new TestRecord.Builder(other);
  }

  /**
   * RecordBuilder for TestRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecord>
    implements org.apache.avro.data.RecordBuilder<TestRecord> {

    private CharSequence name;
    private Integer valueOne;
    private Long valueTwo;

    /** Creates a new Builder */
    private Builder() {
      super(TestRecord.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(TestRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valueOne)) {
        this.valueOne = data().deepCopy(fields()[1].schema(), other.valueOne);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valueTwo)) {
        this.valueTwo = data().deepCopy(fields()[2].schema(), other.valueTwo);
        fieldSetFlags()[2] = true;
      }
    }

    /** Creates a Builder by copying an existing TestRecord instance */
    private Builder(TestRecord other) {
            super(TestRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.valueOne)) {
        this.valueOne = data().deepCopy(fields()[1].schema(), other.valueOne);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valueTwo)) {
        this.valueTwo = data().deepCopy(fields()[2].schema(), other.valueTwo);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public CharSequence getName() {
      return name;
    }

    /** Sets the value of the 'name' field */
    public TestRecord.Builder setName(CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'name' field */
    public TestRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'valueOne' field */
    public Integer getValueOne() {
      return valueOne;
    }

    /** Sets the value of the 'valueOne' field */
    public TestRecord.Builder setValueOne(Integer value) {
      validate(fields()[1], value);
      this.valueOne = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'valueOne' field has been set */
    public boolean hasValueOne() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'valueOne' field */
    public TestRecord.Builder clearValueOne() {
      valueOne = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'valueTwo' field */
    public Long getValueTwo() {
      return valueTwo;
    }

    /** Sets the value of the 'valueTwo' field */
    public TestRecord.Builder setValueTwo(Long value) {
      validate(fields()[2], value);
      this.valueTwo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'valueTwo' field has been set */
    public boolean hasValueTwo() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'valueTwo' field */
    public TestRecord.Builder clearValueTwo() {
      valueTwo = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TestRecord build() {
      try {
        TestRecord record = new TestRecord();
        record.name = fieldSetFlags()[0] ? this.name : (CharSequence) defaultValue(fields()[0]);
        record.valueOne = fieldSetFlags()[1] ? this.valueOne : (Integer) defaultValue(fields()[1]);
        record.valueTwo = fieldSetFlags()[2] ? this.valueTwo : (Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
